// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fixbug
{

  // Internal implementation detail -- do not call these.
  void protobuf_AddDesc_test_2eproto();
  void protobuf_AssignDesc_test_2eproto();
  void protobuf_ShutdownFile_test_2eproto();

  class GetFriendListRequest;
  class GetFriendListResponse;
  class LoginRequest;
  class LoginResponse;
  class ResultCode;
  class User;

  enum User_Sex
  {
    User_Sex_MAN = 0,
    User_Sex_WOMAN = 1,
    User_Sex_User_Sex_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
    User_Sex_User_Sex_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
  };
  bool User_Sex_IsValid(int value);
  const User_Sex User_Sex_Sex_MIN = User_Sex_MAN;
  const User_Sex User_Sex_Sex_MAX = User_Sex_WOMAN;
  const int User_Sex_Sex_ARRAYSIZE = User_Sex_Sex_MAX + 1;

  const ::google::protobuf::EnumDescriptor *User_Sex_descriptor();
  inline const ::std::string &User_Sex_Name(User_Sex value)
  {
    return ::google::protobuf::internal::NameOfEnum(
        User_Sex_descriptor(), value);
  }
  inline bool User_Sex_Parse(
      const ::std::string &name, User_Sex *value)
  {
    return ::google::protobuf::internal::ParseNamedEnum<User_Sex>(
        User_Sex_descriptor(), name, value);
  }
  // ===================================================================

  class ResultCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.ResultCode) */
  {
  public:
    ResultCode();
    virtual ~ResultCode();

    ResultCode(const ResultCode &from);

    inline ResultCode &operator=(const ResultCode &from)
    {
      CopyFrom(from);
      return *this;
    }

    static const ::google::protobuf::Descriptor *descriptor();
    static const ResultCode &default_instance();

    void Swap(ResultCode *other);

    // implements Message ----------------------------------------------

    inline ResultCode *New() const { return New(NULL); }

    ResultCode *New(::google::protobuf::Arena *arena) const;
    void CopyFrom(const ::google::protobuf::Message &from);
    void MergeFrom(const ::google::protobuf::Message &from);
    void CopyFrom(const ResultCode &from);
    void MergeFrom(const ResultCode &from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream *input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream *output) const;
    ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8 *output) const;
    ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(::google::protobuf::uint8 *output) const
    {
      return InternalSerializeWithCachedSizesToArray(false, output);
    }
    int GetCachedSize() const { return _cached_size_; }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(ResultCode *other);

  private:
    inline ::google::protobuf::Arena *GetArenaNoVirtual() const
    {
      return _internal_metadata_.arena();
    }
    inline void *MaybeArenaPtr() const
    {
      return _internal_metadata_.raw_arena_ptr();
    }

  public:
    ::google::protobuf::Metadata GetMetadata() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional int32 errcode = 1;
    void clear_errcode();
    static const int kErrcodeFieldNumber = 1;
    ::google::protobuf::int32 errcode() const;
    void set_errcode(::google::protobuf::int32 value);

    // optional bytes errmsg = 2;
    void clear_errmsg();
    static const int kErrmsgFieldNumber = 2;
    const ::std::string &errmsg() const;
    void set_errmsg(const ::std::string &value);
    void set_errmsg(const char *value);
    void set_errmsg(const void *value, size_t size);
    ::std::string *mutable_errmsg();
    ::std::string *release_errmsg();
    void set_allocated_errmsg(::std::string *errmsg);

    // @@protoc_insertion_point(class_scope:fixbug.ResultCode)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    bool _is_default_instance_;
    ::google::protobuf::internal::ArenaStringPtr errmsg_;
    ::google::protobuf::int32 errcode_;
    mutable int _cached_size_;
    friend void protobuf_AddDesc_test_2eproto();
    friend void protobuf_AssignDesc_test_2eproto();
    friend void protobuf_ShutdownFile_test_2eproto();

    void InitAsDefaultInstance();
    static ResultCode *default_instance_;
  };
  // -------------------------------------------------------------------

  class LoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.LoginRequest) */
  {
  public:
    LoginRequest();
    virtual ~LoginRequest();

    LoginRequest(const LoginRequest &from);

    inline LoginRequest &operator=(const LoginRequest &from)
    {
      CopyFrom(from);
      return *this;
    }

    static const ::google::protobuf::Descriptor *descriptor();
    static const LoginRequest &default_instance();

    void Swap(LoginRequest *other);

    // implements Message ----------------------------------------------

    inline LoginRequest *New() const { return New(NULL); }

    LoginRequest *New(::google::protobuf::Arena *arena) const;
    void CopyFrom(const ::google::protobuf::Message &from);
    void MergeFrom(const ::google::protobuf::Message &from);
    void CopyFrom(const LoginRequest &from);
    void MergeFrom(const LoginRequest &from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream *input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream *output) const;
    ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8 *output) const;
    ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(::google::protobuf::uint8 *output) const
    {
      return InternalSerializeWithCachedSizesToArray(false, output);
    }
    int GetCachedSize() const { return _cached_size_; }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(LoginRequest *other);

  private:
    inline ::google::protobuf::Arena *GetArenaNoVirtual() const
    {
      return _internal_metadata_.arena();
    }
    inline void *MaybeArenaPtr() const
    {
      return _internal_metadata_.raw_arena_ptr();
    }

  public:
    ::google::protobuf::Metadata GetMetadata() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional bytes name = 1;
    void clear_name();
    static const int kNameFieldNumber = 1;
    const ::std::string &name() const;
    void set_name(const ::std::string &value);
    void set_name(const char *value);
    void set_name(const void *value, size_t size);
    ::std::string *mutable_name();
    ::std::string *release_name();
    void set_allocated_name(::std::string *name);

    // optional bytes pwd = 2;
    void clear_pwd();
    static const int kPwdFieldNumber = 2;
    const ::std::string &pwd() const;
    void set_pwd(const ::std::string &value);
    void set_pwd(const char *value);
    void set_pwd(const void *value, size_t size);
    ::std::string *mutable_pwd();
    ::std::string *release_pwd();
    void set_allocated_pwd(::std::string *pwd);

    // @@protoc_insertion_point(class_scope:fixbug.LoginRequest)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    bool _is_default_instance_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr pwd_;
    mutable int _cached_size_;
    friend void protobuf_AddDesc_test_2eproto();
    friend void protobuf_AssignDesc_test_2eproto();
    friend void protobuf_ShutdownFile_test_2eproto();

    void InitAsDefaultInstance();
    static LoginRequest *default_instance_;
  };
  // -------------------------------------------------------------------

  class LoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.LoginResponse) */
  {
  public:
    LoginResponse();
    virtual ~LoginResponse();

    LoginResponse(const LoginResponse &from);

    inline LoginResponse &operator=(const LoginResponse &from)
    {
      CopyFrom(from);
      return *this;
    }

    static const ::google::protobuf::Descriptor *descriptor();
    static const LoginResponse &default_instance();

    void Swap(LoginResponse *other);

    // implements Message ----------------------------------------------

    inline LoginResponse *New() const { return New(NULL); }

    LoginResponse *New(::google::protobuf::Arena *arena) const;
    void CopyFrom(const ::google::protobuf::Message &from);
    void MergeFrom(const ::google::protobuf::Message &from);
    void CopyFrom(const LoginResponse &from);
    void MergeFrom(const LoginResponse &from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream *input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream *output) const;
    ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8 *output) const;
    ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(::google::protobuf::uint8 *output) const
    {
      return InternalSerializeWithCachedSizesToArray(false, output);
    }
    int GetCachedSize() const { return _cached_size_; }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(LoginResponse *other);

  private:
    inline ::google::protobuf::Arena *GetArenaNoVirtual() const
    {
      return _internal_metadata_.arena();
    }
    inline void *MaybeArenaPtr() const
    {
      return _internal_metadata_.raw_arena_ptr();
    }

  public:
    ::google::protobuf::Metadata GetMetadata() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional .fixbug.ResultCode Result = 1;
    bool has_result() const;
    void clear_result();
    static const int kResultFieldNumber = 1;
    const ::fixbug::ResultCode &result() const;
    ::fixbug::ResultCode *mutable_result();
    ::fixbug::ResultCode *release_result();
    void set_allocated_result(::fixbug::ResultCode *result);

    // optional bool success = 2;
    void clear_success();
    static const int kSuccessFieldNumber = 2;
    bool success() const;
    void set_success(bool value);

    // @@protoc_insertion_point(class_scope:fixbug.LoginResponse)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    bool _is_default_instance_;
    ::fixbug::ResultCode *result_;
    bool success_;
    mutable int _cached_size_;
    friend void protobuf_AddDesc_test_2eproto();
    friend void protobuf_AssignDesc_test_2eproto();
    friend void protobuf_ShutdownFile_test_2eproto();

    void InitAsDefaultInstance();
    static LoginResponse *default_instance_;
  };
  // -------------------------------------------------------------------

  class GetFriendListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.GetFriendListRequest) */
  {
  public:
    GetFriendListRequest();
    virtual ~GetFriendListRequest();

    GetFriendListRequest(const GetFriendListRequest &from);

    inline GetFriendListRequest &operator=(const GetFriendListRequest &from)
    {
      CopyFrom(from);
      return *this;
    }

    static const ::google::protobuf::Descriptor *descriptor();
    static const GetFriendListRequest &default_instance();

    void Swap(GetFriendListRequest *other);

    // implements Message ----------------------------------------------

    inline GetFriendListRequest *New() const { return New(NULL); }

    GetFriendListRequest *New(::google::protobuf::Arena *arena) const;
    void CopyFrom(const ::google::protobuf::Message &from);
    void MergeFrom(const ::google::protobuf::Message &from);
    void CopyFrom(const GetFriendListRequest &from);
    void MergeFrom(const GetFriendListRequest &from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream *input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream *output) const;
    ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8 *output) const;
    ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(::google::protobuf::uint8 *output) const
    {
      return InternalSerializeWithCachedSizesToArray(false, output);
    }
    int GetCachedSize() const { return _cached_size_; }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(GetFriendListRequest *other);

  private:
    inline ::google::protobuf::Arena *GetArenaNoVirtual() const
    {
      return _internal_metadata_.arena();
    }
    inline void *MaybeArenaPtr() const
    {
      return _internal_metadata_.raw_arena_ptr();
    }

  public:
    ::google::protobuf::Metadata GetMetadata() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional uint32 userid = 1;
    void clear_userid();
    static const int kUseridFieldNumber = 1;
    ::google::protobuf::uint32 userid() const;
    void set_userid(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:fixbug.GetFriendListRequest)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    bool _is_default_instance_;
    ::google::protobuf::uint32 userid_;
    mutable int _cached_size_;
    friend void protobuf_AddDesc_test_2eproto();
    friend void protobuf_AssignDesc_test_2eproto();
    friend void protobuf_ShutdownFile_test_2eproto();

    void InitAsDefaultInstance();
    static GetFriendListRequest *default_instance_;
  };
  // -------------------------------------------------------------------

  class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.User) */
  {
  public:
    User();
    virtual ~User();

    User(const User &from);

    inline User &operator=(const User &from)
    {
      CopyFrom(from);
      return *this;
    }

    static const ::google::protobuf::Descriptor *descriptor();
    static const User &default_instance();

    void Swap(User *other);

    // implements Message ----------------------------------------------

    inline User *New() const { return New(NULL); }

    User *New(::google::protobuf::Arena *arena) const;
    void CopyFrom(const ::google::protobuf::Message &from);
    void MergeFrom(const ::google::protobuf::Message &from);
    void CopyFrom(const User &from);
    void MergeFrom(const User &from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream *input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream *output) const;
    ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8 *output) const;
    ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(::google::protobuf::uint8 *output) const
    {
      return InternalSerializeWithCachedSizesToArray(false, output);
    }
    int GetCachedSize() const { return _cached_size_; }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(User *other);

  private:
    inline ::google::protobuf::Arena *GetArenaNoVirtual() const
    {
      return _internal_metadata_.arena();
    }
    inline void *MaybeArenaPtr() const
    {
      return _internal_metadata_.raw_arena_ptr();
    }

  public:
    ::google::protobuf::Metadata GetMetadata() const;

    // nested types ----------------------------------------------------

    typedef User_Sex Sex;
    static const Sex MAN =
        User_Sex_MAN;
    static const Sex WOMAN =
        User_Sex_WOMAN;
    static inline bool Sex_IsValid(int value)
    {
      return User_Sex_IsValid(value);
    }
    static const Sex Sex_MIN =
        User_Sex_Sex_MIN;
    static const Sex Sex_MAX =
        User_Sex_Sex_MAX;
    static const int Sex_ARRAYSIZE =
        User_Sex_Sex_ARRAYSIZE;
    static inline const ::google::protobuf::EnumDescriptor *
    Sex_descriptor()
    {
      return User_Sex_descriptor();
    }
    static inline const ::std::string &Sex_Name(Sex value)
    {
      return User_Sex_Name(value);
    }
    static inline bool Sex_Parse(const ::std::string &name,
                                 Sex *value)
    {
      return User_Sex_Parse(name, value);
    }

    // accessors -------------------------------------------------------

    // optional bytes name = 1;
    void clear_name();
    static const int kNameFieldNumber = 1;
    const ::std::string &name() const;
    void set_name(const ::std::string &value);
    void set_name(const char *value);
    void set_name(const void *value, size_t size);
    ::std::string *mutable_name();
    ::std::string *release_name();
    void set_allocated_name(::std::string *name);

    // optional uint32 age = 2;
    void clear_age();
    static const int kAgeFieldNumber = 2;
    ::google::protobuf::uint32 age() const;
    void set_age(::google::protobuf::uint32 value);

    // optional .fixbug.User.Sex sex = 3;
    void clear_sex();
    static const int kSexFieldNumber = 3;
    ::fixbug::User_Sex sex() const;
    void set_sex(::fixbug::User_Sex value);

    // @@protoc_insertion_point(class_scope:fixbug.User)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    bool _is_default_instance_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::uint32 age_;
    int sex_;
    mutable int _cached_size_;
    friend void protobuf_AddDesc_test_2eproto();
    friend void protobuf_AssignDesc_test_2eproto();
    friend void protobuf_ShutdownFile_test_2eproto();

    void InitAsDefaultInstance();
    static User *default_instance_;
  };
  // -------------------------------------------------------------------

  class GetFriendListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.GetFriendListResponse) */
  {
  public:
    GetFriendListResponse();
    virtual ~GetFriendListResponse();

    GetFriendListResponse(const GetFriendListResponse &from);

    inline GetFriendListResponse &operator=(const GetFriendListResponse &from)
    {
      CopyFrom(from);
      return *this;
    }

    static const ::google::protobuf::Descriptor *descriptor();
    static const GetFriendListResponse &default_instance();

    void Swap(GetFriendListResponse *other);

    // implements Message ----------------------------------------------

    inline GetFriendListResponse *New() const { return New(NULL); }

    GetFriendListResponse *New(::google::protobuf::Arena *arena) const;
    void CopyFrom(const ::google::protobuf::Message &from);
    void MergeFrom(const ::google::protobuf::Message &from);
    void CopyFrom(const GetFriendListResponse &from);
    void MergeFrom(const GetFriendListResponse &from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream *input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream *output) const;
    ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8 *output) const;
    ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(::google::protobuf::uint8 *output) const
    {
      return InternalSerializeWithCachedSizesToArray(false, output);
    }
    int GetCachedSize() const { return _cached_size_; }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(GetFriendListResponse *other);

  private:
    inline ::google::protobuf::Arena *GetArenaNoVirtual() const
    {
      return _internal_metadata_.arena();
    }
    inline void *MaybeArenaPtr() const
    {
      return _internal_metadata_.raw_arena_ptr();
    }

  public:
    ::google::protobuf::Metadata GetMetadata() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional .fixbug.ResultCode Result = 1;
    bool has_result() const;
    void clear_result();
    static const int kResultFieldNumber = 1;
    const ::fixbug::ResultCode &result() const;
    ::fixbug::ResultCode *mutable_result();
    ::fixbug::ResultCode *release_result();
    void set_allocated_result(::fixbug::ResultCode *result);

    // repeated .fixbug.User FrinedList = 2;
    int frinedlist_size() const;
    void clear_frinedlist();
    static const int kFrinedListFieldNumber = 2;
    const ::fixbug::User &frinedlist(int index) const;
    ::fixbug::User *mutable_frinedlist(int index);
    ::fixbug::User *add_frinedlist();
    ::google::protobuf::RepeatedPtrField<::fixbug::User> *
    mutable_frinedlist();
    const ::google::protobuf::RepeatedPtrField<::fixbug::User> &
    frinedlist() const;

    // @@protoc_insertion_point(class_scope:fixbug.GetFriendListResponse)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    bool _is_default_instance_;
    ::fixbug::ResultCode *result_;
    ::google::protobuf::RepeatedPtrField<::fixbug::User> frinedlist_;
    mutable int _cached_size_;
    friend void protobuf_AddDesc_test_2eproto();
    friend void protobuf_AssignDesc_test_2eproto();
    friend void protobuf_ShutdownFile_test_2eproto();

    void InitAsDefaultInstance();
    static GetFriendListResponse *default_instance_;
  };
  // ===================================================================

  class UserServiceRpc_Stub;

  class UserServiceRpc : public ::google::protobuf::Service
  {
  protected:
    // This class should be treated as an abstract interface.
    inline UserServiceRpc(){};

  public:
    virtual ~UserServiceRpc();

    typedef UserServiceRpc_Stub Stub;

    static const ::google::protobuf::ServiceDescriptor *descriptor();

    virtual void Login(::google::protobuf::RpcController *controller,
                       const ::fixbug::LoginRequest *request,
                       ::fixbug::LoginResponse *response,
                       ::google::protobuf::Closure *done);
    virtual void GetFriendList(::google::protobuf::RpcController *controller,
                               const ::fixbug::GetFriendListRequest *request,
                               ::fixbug::GetFriendListResponse *response,
                               ::google::protobuf::Closure *done);

    // implements Service ----------------------------------------------

    const ::google::protobuf::ServiceDescriptor *GetDescriptor();
    void CallMethod(const ::google::protobuf::MethodDescriptor *method,
                    ::google::protobuf::RpcController *controller,
                    const ::google::protobuf::Message *request,
                    ::google::protobuf::Message *response,
                    ::google::protobuf::Closure *done);
    const ::google::protobuf::Message &GetRequestPrototype(
        const ::google::protobuf::MethodDescriptor *method) const;
    const ::google::protobuf::Message &GetResponsePrototype(
        const ::google::protobuf::MethodDescriptor *method) const;

  private:
    GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc);
  };

  class UserServiceRpc_Stub : public UserServiceRpc
  {
  public:
    UserServiceRpc_Stub(::google::protobuf::RpcChannel *channel);
    UserServiceRpc_Stub(::google::protobuf::RpcChannel *channel,
                        ::google::protobuf::Service::ChannelOwnership ownership);
    ~UserServiceRpc_Stub();

    inline ::google::protobuf::RpcChannel *channel() { return channel_; }

    // implements UserServiceRpc ------------------------------------------

    void Login(::google::protobuf::RpcController *controller,
               const ::fixbug::LoginRequest *request,
               ::fixbug::LoginResponse *response,
               ::google::protobuf::Closure *done);
    void GetFriendList(::google::protobuf::RpcController *controller,
                       const ::fixbug::GetFriendListRequest *request,
                       ::fixbug::GetFriendListResponse *response,
                       ::google::protobuf::Closure *done);

  private:
    ::google::protobuf::RpcChannel *channel_;
    bool owns_channel_;
    GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc_Stub);
  };

  // ===================================================================

  // ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
  // ResultCode

  // optional int32 errcode = 1;
  inline void ResultCode::clear_errcode()
  {
    errcode_ = 0;
  }
  inline ::google::protobuf::int32 ResultCode::errcode() const
  {
    // @@protoc_insertion_point(field_get:fixbug.ResultCode.errcode)
    return errcode_;
  }
  inline void ResultCode::set_errcode(::google::protobuf::int32 value)
  {

    errcode_ = value;
    // @@protoc_insertion_point(field_set:fixbug.ResultCode.errcode)
  }

  // optional bytes errmsg = 2;
  inline void ResultCode::clear_errmsg()
  {
    errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline const ::std::string &ResultCode::errmsg() const
  {
    // @@protoc_insertion_point(field_get:fixbug.ResultCode.errmsg)
    return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline void ResultCode::set_errmsg(const ::std::string &value)
  {

    errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:fixbug.ResultCode.errmsg)
  }
  inline void ResultCode::set_errmsg(const char *value)
  {

    errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:fixbug.ResultCode.errmsg)
  }
  inline void ResultCode::set_errmsg(const void *value, size_t size)
  {

    errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                       ::std::string(reinterpret_cast<const char *>(value), size));
    // @@protoc_insertion_point(field_set_pointer:fixbug.ResultCode.errmsg)
  }
  inline ::std::string *ResultCode::mutable_errmsg()
  {

    // @@protoc_insertion_point(field_mutable:fixbug.ResultCode.errmsg)
    return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline ::std::string *ResultCode::release_errmsg()
  {
    // @@protoc_insertion_point(field_release:fixbug.ResultCode.errmsg)

    return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline void ResultCode::set_allocated_errmsg(::std::string *errmsg)
  {
    if (errmsg != NULL)
    {
    }
    else
    {
    }
    errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
    // @@protoc_insertion_point(field_set_allocated:fixbug.ResultCode.errmsg)
  }

  // -------------------------------------------------------------------

  // LoginRequest

  // optional bytes name = 1;
  inline void LoginRequest::clear_name()
  {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline const ::std::string &LoginRequest::name() const
  {
    // @@protoc_insertion_point(field_get:fixbug.LoginRequest.name)
    return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline void LoginRequest::set_name(const ::std::string &value)
  {

    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:fixbug.LoginRequest.name)
  }
  inline void LoginRequest::set_name(const char *value)
  {

    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:fixbug.LoginRequest.name)
  }
  inline void LoginRequest::set_name(const void *value, size_t size)
  {

    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     ::std::string(reinterpret_cast<const char *>(value), size));
    // @@protoc_insertion_point(field_set_pointer:fixbug.LoginRequest.name)
  }
  inline ::std::string *LoginRequest::mutable_name()
  {

    // @@protoc_insertion_point(field_mutable:fixbug.LoginRequest.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline ::std::string *LoginRequest::release_name()
  {
    // @@protoc_insertion_point(field_release:fixbug.LoginRequest.name)

    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline void LoginRequest::set_allocated_name(::std::string *name)
  {
    if (name != NULL)
    {
    }
    else
    {
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:fixbug.LoginRequest.name)
  }

  // optional bytes pwd = 2;
  inline void LoginRequest::clear_pwd()
  {
    pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline const ::std::string &LoginRequest::pwd() const
  {
    // @@protoc_insertion_point(field_get:fixbug.LoginRequest.pwd)
    return pwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline void LoginRequest::set_pwd(const ::std::string &value)
  {

    pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:fixbug.LoginRequest.pwd)
  }
  inline void LoginRequest::set_pwd(const char *value)
  {

    pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:fixbug.LoginRequest.pwd)
  }
  inline void LoginRequest::set_pwd(const void *value, size_t size)
  {

    pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                    ::std::string(reinterpret_cast<const char *>(value), size));
    // @@protoc_insertion_point(field_set_pointer:fixbug.LoginRequest.pwd)
  }
  inline ::std::string *LoginRequest::mutable_pwd()
  {

    // @@protoc_insertion_point(field_mutable:fixbug.LoginRequest.pwd)
    return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline ::std::string *LoginRequest::release_pwd()
  {
    // @@protoc_insertion_point(field_release:fixbug.LoginRequest.pwd)

    return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline void LoginRequest::set_allocated_pwd(::std::string *pwd)
  {
    if (pwd != NULL)
    {
    }
    else
    {
    }
    pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
    // @@protoc_insertion_point(field_set_allocated:fixbug.LoginRequest.pwd)
  }

  // -------------------------------------------------------------------

  // LoginResponse

  // optional .fixbug.ResultCode Result = 1;
  inline bool LoginResponse::has_result() const
  {
    return !_is_default_instance_ && result_ != NULL;
  }
  inline void LoginResponse::clear_result()
  {
    if (GetArenaNoVirtual() == NULL && result_ != NULL)
      delete result_;
    result_ = NULL;
  }
  inline const ::fixbug::ResultCode &LoginResponse::result() const
  {
    // @@protoc_insertion_point(field_get:fixbug.LoginResponse.Result)
    return result_ != NULL ? *result_ : *default_instance_->result_;
  }
  inline ::fixbug::ResultCode *LoginResponse::mutable_result()
  {

    if (result_ == NULL)
    {
      result_ = new ::fixbug::ResultCode;
    }
    // @@protoc_insertion_point(field_mutable:fixbug.LoginResponse.Result)
    return result_;
  }
  inline ::fixbug::ResultCode *LoginResponse::release_result()
  {
    // @@protoc_insertion_point(field_release:fixbug.LoginResponse.Result)

    ::fixbug::ResultCode *temp = result_;
    result_ = NULL;
    return temp;
  }
  inline void LoginResponse::set_allocated_result(::fixbug::ResultCode *result)
  {
    delete result_;
    result_ = result;
    if (result)
    {
    }
    else
    {
    }
    // @@protoc_insertion_point(field_set_allocated:fixbug.LoginResponse.Result)
  }

  // optional bool success = 2;
  inline void LoginResponse::clear_success()
  {
    success_ = false;
  }
  inline bool LoginResponse::success() const
  {
    // @@protoc_insertion_point(field_get:fixbug.LoginResponse.success)
    return success_;
  }
  inline void LoginResponse::set_success(bool value)
  {

    success_ = value;
    // @@protoc_insertion_point(field_set:fixbug.LoginResponse.success)
  }

  // -------------------------------------------------------------------

  // GetFriendListRequest

  // optional uint32 userid = 1;
  inline void GetFriendListRequest::clear_userid()
  {
    userid_ = 0u;
  }
  inline ::google::protobuf::uint32 GetFriendListRequest::userid() const
  {
    // @@protoc_insertion_point(field_get:fixbug.GetFriendListRequest.userid)
    return userid_;
  }
  inline void GetFriendListRequest::set_userid(::google::protobuf::uint32 value)
  {

    userid_ = value;
    // @@protoc_insertion_point(field_set:fixbug.GetFriendListRequest.userid)
  }

  // -------------------------------------------------------------------

  // User

  // optional bytes name = 1;
  inline void User::clear_name()
  {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline const ::std::string &User::name() const
  {
    // @@protoc_insertion_point(field_get:fixbug.User.name)
    return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline void User::set_name(const ::std::string &value)
  {

    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:fixbug.User.name)
  }
  inline void User::set_name(const char *value)
  {

    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:fixbug.User.name)
  }
  inline void User::set_name(const void *value, size_t size)
  {

    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     ::std::string(reinterpret_cast<const char *>(value), size));
    // @@protoc_insertion_point(field_set_pointer:fixbug.User.name)
  }
  inline ::std::string *User::mutable_name()
  {

    // @@protoc_insertion_point(field_mutable:fixbug.User.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline ::std::string *User::release_name()
  {
    // @@protoc_insertion_point(field_release:fixbug.User.name)

    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  inline void User::set_allocated_name(::std::string *name)
  {
    if (name != NULL)
    {
    }
    else
    {
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:fixbug.User.name)
  }

  // optional uint32 age = 2;
  inline void User::clear_age()
  {
    age_ = 0u;
  }
  inline ::google::protobuf::uint32 User::age() const
  {
    // @@protoc_insertion_point(field_get:fixbug.User.age)
    return age_;
  }
  inline void User::set_age(::google::protobuf::uint32 value)
  {

    age_ = value;
    // @@protoc_insertion_point(field_set:fixbug.User.age)
  }

  // optional .fixbug.User.Sex sex = 3;
  inline void User::clear_sex()
  {
    sex_ = 0;
  }
  inline ::fixbug::User_Sex User::sex() const
  {
    // @@protoc_insertion_point(field_get:fixbug.User.sex)
    return static_cast<::fixbug::User_Sex>(sex_);
  }
  inline void User::set_sex(::fixbug::User_Sex value)
  {

    sex_ = value;
    // @@protoc_insertion_point(field_set:fixbug.User.sex)
  }

  // -------------------------------------------------------------------

  // GetFriendListResponse

  // optional .fixbug.ResultCode Result = 1;
  inline bool GetFriendListResponse::has_result() const
  {
    return !_is_default_instance_ && result_ != NULL;
  }
  inline void GetFriendListResponse::clear_result()
  {
    if (GetArenaNoVirtual() == NULL && result_ != NULL)
      delete result_;
    result_ = NULL;
  }
  inline const ::fixbug::ResultCode &GetFriendListResponse::result() const
  {
    // @@protoc_insertion_point(field_get:fixbug.GetFriendListResponse.Result)
    return result_ != NULL ? *result_ : *default_instance_->result_;
  }
  inline ::fixbug::ResultCode *GetFriendListResponse::mutable_result()
  {

    if (result_ == NULL)
    {
      result_ = new ::fixbug::ResultCode;
    }
    // @@protoc_insertion_point(field_mutable:fixbug.GetFriendListResponse.Result)
    return result_;
  }
  inline ::fixbug::ResultCode *GetFriendListResponse::release_result()
  {
    // @@protoc_insertion_point(field_release:fixbug.GetFriendListResponse.Result)

    ::fixbug::ResultCode *temp = result_;
    result_ = NULL;
    return temp;
  }
  inline void GetFriendListResponse::set_allocated_result(::fixbug::ResultCode *result)
  {
    delete result_;
    result_ = result;
    if (result)
    {
    }
    else
    {
    }
    // @@protoc_insertion_point(field_set_allocated:fixbug.GetFriendListResponse.Result)
  }

  // repeated .fixbug.User FrinedList = 2;
  inline int GetFriendListResponse::frinedlist_size() const
  {
    return frinedlist_.size();
  }
  inline void GetFriendListResponse::clear_frinedlist()
  {
    frinedlist_.Clear();
  }
  inline const ::fixbug::User &GetFriendListResponse::frinedlist(int index) const
  {
    // @@protoc_insertion_point(field_get:fixbug.GetFriendListResponse.FrinedList)
    return frinedlist_.Get(index);
  }
  inline ::fixbug::User *GetFriendListResponse::mutable_frinedlist(int index)
  {
    // @@protoc_insertion_point(field_mutable:fixbug.GetFriendListResponse.FrinedList)
    return frinedlist_.Mutable(index);
  }
  inline ::fixbug::User *GetFriendListResponse::add_frinedlist()
  {
    // @@protoc_insertion_point(field_add:fixbug.GetFriendListResponse.FrinedList)
    return frinedlist_.Add();
  }
  inline ::google::protobuf::RepeatedPtrField<::fixbug::User> *
  GetFriendListResponse::mutable_frinedlist()
  {
    // @@protoc_insertion_point(field_mutable_list:fixbug.GetFriendListResponse.FrinedList)
    return &frinedlist_;
  }
  inline const ::google::protobuf::RepeatedPtrField<::fixbug::User> &
  GetFriendListResponse::frinedlist() const
  {
    // @@protoc_insertion_point(field_list:fixbug.GetFriendListResponse.FrinedList)
    return frinedlist_;
  }

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS
  // -------------------------------------------------------------------

  // -------------------------------------------------------------------

  // -------------------------------------------------------------------

  // -------------------------------------------------------------------

  // -------------------------------------------------------------------

  // @@protoc_insertion_point(namespace_scope)

} // namespace fixbug

#ifndef SWIG
namespace google
{
  namespace protobuf
  {

    template <>
    struct is_proto_enum<::fixbug::User_Sex> : ::google::protobuf::internal::true_type
    {
    };
    template <>
    inline const EnumDescriptor *GetEnumDescriptor<::fixbug::User_Sex>()
    {
      return ::fixbug::User_Sex_descriptor();
    }

  } // namespace protobuf
} // namespace google
#endif // SWIG

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_test_2eproto__INCLUDED
